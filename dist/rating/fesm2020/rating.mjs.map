{"version":3,"file":"rating.mjs","sources":["../../../projects/rating/src/lib/rating.service.ts","../../../projects/rating/src/lib/rating-element.model.ts","../../../projects/rating/src/lib/rating.component.ts","../../../projects/rating/src/lib/rating.component.html","../../../projects/rating/src/lib/rating.module.ts","../../../projects/rating/src/rating.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RatingService {\n\n  constructor() { }\n}\n","export class RatingElement {\r\n    constructor (\r\n      private isActive: boolean = false,\r\n      private isHovered: boolean = false,\r\n      private isPartyallyActive: boolean = false\r\n    ) {}\r\n\r\n    public setActiveValue(value: boolean): void {\r\n      this.isActive = value;\r\n    }\r\n    public setPartuallyActiveValue(value: boolean): void {\r\n      this.isPartyallyActive = value;\r\n    }\r\n\r\n    public getActiveValue(): boolean {\r\n      return this.isActive;\r\n    }\r\n\r\n    public getPartuallyActiveValue(): boolean {\r\n        return this.isPartyallyActive;\r\n    }\r\n\r\n    public setHoverValue(value: boolean): void {\r\n        this.isHovered = value;\r\n    }\r\n\r\n    public getHoverValue(): boolean {\r\n        return this.isHovered;\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { RatingElement } from './rating-element.model';\n\n@Component({\n  selector: 'rs-rating',\n  templateUrl: 'rating.component.html',\n  styleUrls: ['rating.component.scss'],\n})\nexport class RatingComponent implements OnInit {\n  @Input()\n  public activeValue: number | null = null;\n  @Input()\n  public ratingCount = 5;\n  @Input()\n  public isStatic = false;\n  @Input()\n  public large!: boolean;\n  @Input()\n  public medium!: boolean;\n  @Input()\n  public small!: boolean;\n\n  public ratingElements!: RatingElement[];\n  public partuallyActiveWidth!: number;\n  public partuallyInactiveWidth!: number;\n\n  @Output() changedValue: EventEmitter<number> = new EventEmitter<number>();\n\n  ngOnInit(): void {\n    this.ratingElements = this.initRatingControl();\n    this.updateActualValueControl();\n  }\n\n  public changeHoverValue(currentIndex: number): void {\n    if (currentIndex === null) {\n      return;\n    }\n\n    this.ratingElements.forEach((element: RatingElement, index: number) => {\n      if (index <= currentIndex) {\n        element.setHoverValue(true);\n      }\n    });\n  }\n\n  public changeActiveElementsState(currentIndex: number | null): void {\n    if (currentIndex === null) {\n      return;\n    }\n\n    const getRatingElement: RatingElement = this.ratingElements[currentIndex];\n    const isNextRatingActiveAndExist =\n      currentIndex + 1 < this.ratingElements.length\n        ? this.ratingElements[currentIndex + 1].getActiveValue()\n        : false;\n\n    if (getRatingElement.getActiveValue() && !isNextRatingActiveAndExist) {\n      this.clearActiveElements();\n      this.clearHoverElements();\n\n      this.changedValue.emit(0);\n    } else {\n      this.setActiveElements(currentIndex);\n\n      this.changedValue.emit(currentIndex + 1);\n    }\n  }\n\n  public clearHoverElements(): void {\n    this.ratingElements.forEach((element: RatingElement) =>\n      element.setHoverValue(false)\n    );\n  }\n\n  private setActiveElements(currentIndex: number): void {\n    this.ratingElements.forEach((element: RatingElement, index: number) => {\n      if (index <= currentIndex) {\n        element.setActiveValue(true);\n      } else {\n        element.setActiveValue(false);\n      }\n    });\n  }\n  private setPartuallyActiveElement(currentIndex: number): void {\n    this.ratingElements[currentIndex].setPartuallyActiveValue(true);\n  }\n\n  private clearActiveElements(): void {\n    this.ratingElements.forEach((element: RatingElement) =>\n      element.setActiveValue(false)\n    );\n  }\n\n  private initRatingControl(): RatingElement[] {\n    return Array(...Array(this.ratingCount)).map(\n      (_, index) => new RatingElement()\n    );\n  }\n\n  private updateActualValueControl(): void {\n    if (this.activeValue) {\n      const intActiveValue = parseInt('' + this.activeValue, 10);\n      const resultingIndexFromRatingValue = this.ratingElements\n        ? intActiveValue - 1\n        : null;\n      this.changeActiveElementsState(resultingIndexFromRatingValue);\n      if (\n        this.isStatic &&\n        parseInt('' + this.activeValue, 10) !== this.activeValue\n      ) {\n        this.partuallyActiveWidth =\n          this.activeValue * 100 - intActiveValue * 100;\n        this.partuallyInactiveWidth = 100 - this.partuallyActiveWidth;\n        this.setPartuallyActiveElement(intActiveValue);\n      }\n    }\n  }\n}\n","","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RatingComponent } from './rating.component';\n\nconst exportsComponent = [RatingComponent];\n\n@NgModule({\n  declarations: [\n    ...exportsComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ...exportsComponent\n  ]\n})\nexport class RatingModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}